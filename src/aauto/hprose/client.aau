// client ¿Í»§¶Ë¿â
/**********************************************************\
|                                                          |
|                          hprose                          |
|                                                          |
| Official WebSite: http://www.hprose.com/                 |
|                   http://www.hprose.net/                 |
|                   http://www.hprose.org/                 |
|                                                          |
\**********************************************************/

/**********************************************************\
 *                                                        *
 * client.aau                                             *
 *                                                        *
 * Hprose Client library for AAuto Quicker                *
 *                                                        *
 * LastModified: Nov 18, 2012                             *
 * Author: Ma Bingyao <andot@hprfc.com>                   *
 *                                                        *
\**********************************************************/
import hprose.io;
import inet.whttp;
import inet.urlpart;
import web.script;
import thread;

namespace hprose.client {
    var HproseResultMode = ..hprose.io.HproseResultMode;
    var InputStream = ..hprose.io.InputStream;
    var OutputStream = ..hprose.io.OutputStream;
    var HproseReader = ..hprose.io.HproseReader;
    var HproseWriter = ..hprose.io.HproseWriter;
    var HproseTags = ..hprose.io.HproseTags;
    var jseval = ..web.script("JavaScript").Eval;
    
    class DynamicMethod {
        ctor(invoker, funcname) {
        };
        @{
            _get = function(name) {
                return ..hprose.client.DynamicMethod(invoker, funcname ++ "_" ++ name);
            }
            _call = function(...) {
                return invoker.invoke(funcname, {...});
            }
        }
    }
    class DynamicProxy {
        ctor(invoker) {
        };
        @{
            _get = function(name) {
                return ..hprose.client.DynamicMethod(invoker, name);
            }
        }
    }
    class HproseClient {
        ctor() {
            this.onerror = function(){};
            this.send = null;
            _expectTags = HproseTags._TagResult ++
                          HproseTags._TagArgument ++
                          HproseTags._TagError ++
                          HproseTags._TagEnd;
        };
        invoke = function(name, args = {}, callback = null, onerror = null, byRef = false, resultMode = 0) {
            if (callback == null) {
                return this.syncInvoke(name, args, byRef, resultMode);
            }
            else {
                if (callback != null && type(callback) != type.function) {
                    error("callback must be a function or null.");
                }
                onerror := this.onerror;
                if (type(onerror) != type.null && type(onerror) != type.function) {
                    error("onerror must be a function or null.");
                }
                var me = this;
                return ..thread.create(function() {
                    var errstr = null;
                    try {
                        var result = me.syncInvoke(name, args, byRef, resultMode);
                        callback(result, args);
                    }
                    catch(e) {
                        errstr = e;
                    }
                    if (type(onerror) == type.function) onerror(name, errstr);
                });
            }
        };
        useService = function(uri = null) {
            if (uri != null) this.uri = uri;
            return ..hprose.client.DynamicProxy(this);
        };
        syncInvoke = function(name, args, byRef, resultMode) {
            var stream = OutputStream();
            stream.write(HproseTags._TagCall);
            var hproseWriter = HproseWriter(stream);
            hproseWriter.writeString(name, ,false);
            if ((#args > 0) || byRef) {
                hproseWriter.reset();
                hproseWriter.writeList(args, false);
                if (byRef) hproseWriter.writeBoolean(true);
            }
            stream.write(HproseTags._TagEnd);
            var result = null;
            var errstr = null;
            try {
                var data = tostring(stream);
                data = this.send(data);
                stream = InputStream(data);
                if (resultMode == HproseResultMode._RawWithEndTag) {
                    result = stream.readall();
                    return;
                }
                if (resultMode == HproseResultMode.Raw) {
                    result = stream.readall();
                    result = ..string.left(result, #result - 1);
                    return;
                }
                hproseReader = HproseReader(stream);
                var tag;
                do {
                    tag = hproseReader.checkTags(_expectTags);
                    if (tag == HproseTags._TagResult) {
                        if (resultMode == HproseResultMode._Serialized) {
                            s = hproseReader.readRaw()
                            result = tostring(s);
                        }
                        else {
                            hproseReader.reset();
                            result = hproseReader.unserialize();
                        }
                    }
                    if (tag == HproseTags._TagArgument) {
                        hproseReader.reset();
                        a = hproseReader.readList();
                        for (i = 1; #args; 1) {
                            args[[i]] = a[[i]];
                        }
                    }
                    if (tag == HproseTags._TagError) {
                        hproseReader.reset()
                        errstr = hproseReader.readString();
                    }
                } while (tag != HproseTags._TagEnd);
            }
            catch(e) {
                errstr = e;
            }
            if (errstr != null) error(errstr);
            return result;
        }
        @{
            _get = function(name) {
                return ..hprose.client.DynamicMethod(this, name);
            }
        }
    }
    var cookieManager = {};
    var setCookie = function(cookieList, host) {
        for (i = 1; #cookieList; 1) {
            var cookies = ..string.split(..string.trim(cookieList[[i]]), ';');
            var cookie = {};
            var cookieStr = ..string.trim(cookies[[1]]);
            var pos = ..string.indexAny(cookieStr, '=');
            cookie[['name']] = ..string.left(cookieStr, pos - 1);
            cookie[['value']] = ..string.right(cookieStr, #cookieStr - pos);
            for (i = 2; #cookies; 1) {
                cookieStr = ..string.trim(cookies[[i]]);
                pos = ..string.indexAny(cookieStr, '=');
                cookie[[..string.upper(string.left(cookieStr, pos - 1))]] = ..string.right(cookieStr, #cookieStr - pos);
            }
            // Tomcat can return SetCookie2 with path wrapped in "
            if (cookie[['PATH']]) {
                if (cookie[['PATH']][[1]] == '"') {
                    cookie[['PATH']] = string.right(cookie[['PATH']], #cookie[['PATH']] - 1);
                }
                if (cookie[['PATH']][[#cookie[['PATH']] - 1]] == '"') {
                    cookie[['PATH']] = string.left(cookie[['PATH']], #cookie[['PATH']] - 1);
                }
            }
            else {
                cookie[['PATH']] = '/';
            }
            if (cookie[['EXPIRES']]) {
                cookie[['EXPIRES']] = jseval("Date.parse('" ++ cookie[['EXPIRES']] ++ "')");
            }
            if (cookie[['DOMAIN']]) {
                cookie[['DOMAIN']] = ..string.lower(cookie[['DOMAIN']]);
            }
            else {
                cookie[['DOMAIN']] = host;
            }
            cookie[['SECURE']] = (cookie[['SECURE']] !== null);
            if (!cookieManager[[cookie[['DOMAIN']]]]) {
                cookieManager[[cookie[['DOMAIN']]]] = {};
            }
            cookieManager[[cookie[['DOMAIN']]]][[cookie[['name']]]] = cookie;
        }
    }
    var getCookie = function(host, path, secure) {
        var cookies = {};
        for (domain, domainCookie in cookieManager) {
            if (string.indexAny(host, domain)) {
                var names = {};
                for (name, cookie in domainCookie) {
                    if (cookie[['EXPIRES']] && (jseval("(new Date()).getTime()") > cookie[['EXPIRES']])) {
                        names.push(name);
                    }
                    else if (string.indexAny(path, cookie[['PATH']]) === 1) {
                        if (((secure && cookie[['SECURE']]) ||
                             !cookie[['SECURE']]) && (cookie[['value']] !== null)) {
                            cookies.push(cookie[['name']] + '=' + cookie[['value']]);
                        }
                    }
                }
                for (i = 1; #names; 1) {
                    cookieManager[[domain]][[names[[i]]]] = null;
                }
            }
        }
        if (#cookies > 0) {
            return cookies.join('; ');
        }
        return '';
    }

    class HproseHttpClient {
        ctor(uri) {
            this = ..hprose.client.HproseClient();
            this.uri = uri;
            this.headers = {};
            this.proxy = '';
            this.proxyBypass = '';
            this.timeout = 30000;
            this.keepAlive = false;
            this.keepAliveTimeout = 300;
            this.user = null;
            this.pass = null;
        };
        send = function(data) {
        	var scheme = ..inet.urlpart.getScheme(uri);
        	var host = ..inet.urlpart.getHost(uri);
        	var user = ..inet.urlpart.getUser(uri);
        	var pass = ..inet.urlpart.getPassword(uri);
        	var schemeandhost = scheme ++ "://" ++ host;
        	var path = ..string.sub(uri, #schemeandhost, #uri - #schemeandhost);
            var http = ..inet.whttp( ,proxy, proxyBypass);
            var ok, err, code = http.beginRequest(this.uri, "POST");
            if (!ok) error(code ++ ":" ++ err);
            http.addHeaders = "Content-Type: application/hprose\r\n";
            var cookie = getCookie(host, path, scheme == "https");
            if (cookie) {
            	http.addHeaders += "Cookie: " ++ cookie ++ "\r\n";
            }
            if (this.keepAlive) {
                http.addHeaders += "Connection: keep-alive\r\nKeep-Alive: " ++ this.keepAliveTimeout + "\r\n";
            }
            else {
                http.addHeaders += "Connection: close\r\n";
            }
            http.setTimeouts(this.timeout, this.timeout, this.timeout);
            if (this.user) {
            	http.setAuth(this.user, this.pass);
            }
            elseif (user) {
            	http.setAuth(user, pass);
            }
            http.headers = ..string.join(this.headers);
            var ok, status, total = http.send(data);
            if (!ok) error(total ++ ":" + status);
            if (status == 200) {
            	var cookies = {};
            	do {
            		var next = 1;
                	var cookie, next = http.readHeader("Set-Cookie", next);
                	..table.push(cookies, cookie);
                } while (next);
                setCookie(cookies, host);
            }
            var tbuffer = {}; 
            for(str, size in http.eachRead()) { 
                ..table.push(tbuffer, str); 
            }  
            data =  ..string.join(tbuffer);
            http.endRequest();
            return data;
        };
    }
}
